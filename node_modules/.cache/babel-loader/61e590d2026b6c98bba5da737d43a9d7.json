{"ast":null,"code":"var _jsxFileName = \"/Users/arunaevan/Development/code/Mod3/final_project_2/src/Calculator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // import Editor from 'react-simple-code-editor';\n\nimport { highlight, languages } from 'prismjs';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport { esprima, escodegen, estraverse, getBigO } from './modules/calculator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Calculator(_ref) {\n  _s();\n\n  let {\n    id,\n    calcHistory,\n    setHistoryUpdate\n  } = _ref;\n  const [result, setResult] = useState({\n    error: \"empty\",\n    bigOEst: \"\",\n    hotLines: []\n  }); //  Seed function\n\n  function constant(n) {\n    return n + n;\n  }\n\n  const ast = esprima.parse(`${constant}`);\n  const code = escodegen.generate(ast);\n  const [codeSubmit, setCodeSubmit] = useState(code);\n  const [dataType, setDataType] = useState(\"integer\");\n\n  function handleSubmit() {\n    const {\n      error,\n      bigOEst,\n      hotLines\n    } = getBigO(dataType, codeSubmit);\n    setResult({\n      error: error,\n      bigOEst: bigOEst,\n      hotLines: hotLines\n    });\n    fetch(`http://localhost:9292/calcs/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        code: codeSubmit,\n        bigOEst: bigOEst,\n        hotLines: hotLines\n      })\n    }).then(r => r.json()).then(calc => {\n      calcHistory.push(calc);\n      setHistoryUpdate(bool => !bool);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Choose a data type:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"dataType\",\n      name: \"dataType\",\n      value: dataType,\n      onChange: e => setDataType(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"integer\",\n        children: \"integer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"array-ints\",\n        children: \"array of ints\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" --> \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Big O Estimate: \", result.error === \"empty\" ? null : result.bigOEst]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Calculator, \"2NyepE2RrQi/lt+BuLKUsWVzPe8=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["/Users/arunaevan/Development/code/Mod3/final_project_2/src/Calculator.js"],"names":["React","useState","highlight","languages","esprima","escodegen","estraverse","getBigO","Calculator","id","calcHistory","setHistoryUpdate","result","setResult","error","bigOEst","hotLines","constant","n","ast","parse","code","generate","codeSubmit","setCodeSubmit","dataType","setDataType","handleSubmit","fetch","method","headers","body","JSON","stringify","then","r","json","calc","push","bool","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,SAArC;AACA,OAAO,gCAAP;AACA,OAAO,qCAAP;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,UAA7B,EAAyCC,OAAzC,QAAwD,sBAAxD;;;;AAGA,SAASC,UAAT,OAAyD;AAAA;;AAAA,MAArC;AAACC,IAAAA,EAAD;AAAKC,IAAAA,WAAL;AAAkBC,IAAAA;AAAlB,GAAqC;AACrD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC;AACjCa,IAAAA,KAAK,EAAE,OAD0B;AAEjCC,IAAAA,OAAO,EAAE,EAFwB;AAGjCC,IAAAA,QAAQ,EAAE;AAHuB,GAAD,CAApC,CADqD,CAOrD;;AACA,WAASC,QAAT,CAAkBC,CAAlB,EAAoB;AAAE,WAAOA,CAAC,GAAGA,CAAX;AAAc;;AACpC,QAAMC,GAAG,GAAGf,OAAO,CAACgB,KAAR,CAAe,GAAEH,QAAS,EAA1B,CAAZ;AACA,QAAMI,IAAI,GAAGhB,SAAS,CAACiB,QAAV,CAAmBH,GAAnB,CAAb;AAEA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAACoB,IAAD,CAA5C;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC,SAAD,CAAxC;;AAEA,WAAS0B,YAAT,GAAwB;AACpB,UAAM;AAACb,MAAAA,KAAD;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAA6BT,OAAO,CAACkB,QAAD,EAAWF,UAAX,CAA1C;AACAV,IAAAA,SAAS,CAAC;AAACC,MAAAA,KAAK,EAAEA,KAAR;AAAeC,MAAAA,OAAO,EAAEA,OAAxB;AAAiCC,MAAAA,QAAQ,EAAEA;AAA3C,KAAD,CAAT;AACAY,IAAAA,KAAK,CAAE,+BAA8BnB,EAAG,EAAnC,EAAsC;AACvCoB,MAAAA,MAAM,EAAE,MAD+B;AAEvCC,MAAAA,OAAO,EAAE;AACL,wBAAiB;AADZ,OAF8B;AAKvCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACZ,QAAAA,IAAI,EAAEE,UAAP;AAAmBR,QAAAA,OAAO,EAAEA,OAA5B;AAAqCC,QAAAA,QAAQ,EAAEA;AAA/C,OAAf;AALiC,KAAtC,CAAL,CAOCkB,IAPD,CAOMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAPX,EAQCF,IARD,CAQMG,IAAI,IAAI;AACV3B,MAAAA,WAAW,CAAC4B,IAAZ,CAAiBD,IAAjB;AACA1B,MAAAA,gBAAgB,CAAC4B,IAAI,IAAI,CAACA,IAAV,CAAhB;AACH,KAXD;AAYH;;AAED,sBACI;AAAA,4BAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ,eAcI;AAAQ,MAAA,EAAE,EAAC,UAAX;AAAsB,MAAA,IAAI,EAAC,UAA3B;AAAsC,MAAA,KAAK,EAAEd,QAA7C;AAAuD,MAAA,QAAQ,EAAGe,CAAD,IAAKd,WAAW,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjF;AAAA,8BACI;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAQ,QAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ,eAuBQ;AAAA,gBAAO;AAAP;AAAA;AAAA;AAAA;AAAA,YAvBR,eAwBI;AAAQ,MAAA,OAAO,EAAEf,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBJ,eA0BI;AAAA,qCAAqBf,MAAM,CAACE,KAAP,KAAiB,OAAjB,GAA2B,IAA3B,GAAkCF,MAAM,CAACG,OAA9D;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BJ,eA4BQ;AAAA;AAAA;AAAA;AAAA,YA5BR,eA4Ba;AAAA;AAAA;AAAA;AAAA,YA5Bb;AAAA,kBADJ;AAgCH;;GAhEQP,U;;KAAAA,U;AAmEP,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\n// import Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport { esprima, escodegen, estraverse, getBigO } from './modules/calculator'\n\n   \nfunction Calculator({id, calcHistory, setHistoryUpdate}) {\n    const [result, setResult] = useState({\n        error: \"empty\",\n        bigOEst: \"\",\n        hotLines: []\n    });\n    \n    //  Seed function\n    function constant(n){ return n + n }\n    const ast = esprima.parse(`${constant}`);\n    const code = escodegen.generate(ast);\n\n    const [codeSubmit, setCodeSubmit] = useState(code);\n    const [dataType, setDataType] = useState(\"integer\");\n\n    function handleSubmit() {\n        const {error, bigOEst, hotLines} = getBigO(dataType, codeSubmit);\n        setResult({error: error, bigOEst: bigOEst, hotLines: hotLines});\n        fetch(`http://localhost:9292/calcs/${id}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\" : \"application/json\"\n            },\n            body: JSON.stringify({code: codeSubmit, bigOEst: bigOEst, hotLines: hotLines})\n        })\n        .then(r => r.json())\n        .then(calc => {\n            calcHistory.push(calc);\n            setHistoryUpdate(bool => !bool);\n        })\n    }\n\n    return (\n        <>\n            {/* <Editor\n                value={codeSubmit}\n                onValueChange={code => setCodeSubmit(code)}\n                highlight={code => highlight(code, languages.js)}\n                padding={20}\n                style={{\n                    fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                    fontSize: 12,\n                }}\n            /> */}\n\n\n            <label>Choose a data type:</label>\n            <select id=\"dataType\" name=\"dataType\" value={dataType} onChange={(e)=>setDataType(e.target.value)}>\n                <option value=\"integer\">integer</option>\n                {/* <option value=\"int-length-matters\">integer (length matters)</option> */}\n                <option value=\"array-ints\">array of ints</option>\n                {/* <option value=\"alpha-str\">alpha only string</option> */}\n                {/* <option value=\"alpha-num-str\">alpha-numeric string</option> */}\n                {/* <option value=\"alpha-num-spec-str\">alpha-numeric and special character string</option> */}\n                {/* <option value=\"array-rand-str\">array of random strings</option> */}\n            </select>\n                <span>{\" --> \"}</span>\n            <button onClick={handleSubmit}>Submit</button>\n\n            <h3>Big O Estimate: {result.error === \"empty\" ? null : result.bigOEst}</h3>\n                                                {/* Most Costly Lines: ${result.hotLines} */}\n                <br/><br/>\n        </>\n    );\n}\n\n\n  export default Calculator;"]},"metadata":{},"sourceType":"module"}