[{"/Users/arunaevan/Development/code/Mod3/final_project_2/src/index.js":"1","/Users/arunaevan/Development/code/Mod3/final_project_2/src/App.js":"2","/Users/arunaevan/Development/code/Mod3/final_project_2/src/NotLoggedIn.js":"3","/Users/arunaevan/Development/code/Mod3/final_project_2/src/LoggedIn.js":"4","/Users/arunaevan/Development/code/Mod3/final_project_2/src/SignUp.js":"5","/Users/arunaevan/Development/code/Mod3/final_project_2/src/Login.js":"6","/Users/arunaevan/Development/code/Mod3/final_project_2/src/Calculator.js":"7","/Users/arunaevan/Development/code/Mod3/final_project_2/src/History.js":"8","/Users/arunaevan/Development/code/Mod3/final_project_2/src/CalcRow.js":"9","/Users/arunaevan/Development/code/Mod3/final_project_2/src/modules/calculator.js":"10"},{"size":267,"mtime":1637105430887,"results":"11","hashOfConfig":"12"},{"size":837,"mtime":1637355515231,"results":"13","hashOfConfig":"12"},{"size":685,"mtime":1637353618340,"results":"14","hashOfConfig":"12"},{"size":607,"mtime":1637355449323,"results":"15","hashOfConfig":"12"},{"size":1552,"mtime":1637353885957,"results":"16","hashOfConfig":"12"},{"size":1344,"mtime":1637355205367,"results":"17","hashOfConfig":"12"},{"size":2981,"mtime":1637355660907,"results":"18","hashOfConfig":"12"},{"size":762,"mtime":1637355812387,"results":"19","hashOfConfig":"12"},{"size":687,"mtime":1637355802156,"results":"20","hashOfConfig":"12"},{"size":4668,"mtime":1637319931977,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p5262",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"/Users/arunaevan/Development/code/Mod3/final_project_2/src/index.js",[],"/Users/arunaevan/Development/code/Mod3/final_project_2/src/App.js",[],"/Users/arunaevan/Development/code/Mod3/final_project_2/src/NotLoggedIn.js",[],"/Users/arunaevan/Development/code/Mod3/final_project_2/src/LoggedIn.js",[],"/Users/arunaevan/Development/code/Mod3/final_project_2/src/SignUp.js",[],"/Users/arunaevan/Development/code/Mod3/final_project_2/src/Login.js",[],"/Users/arunaevan/Development/code/Mod3/final_project_2/src/Calculator.js",["44"],"/Users/arunaevan/Development/code/Mod3/final_project_2/src/History.js",[],"/Users/arunaevan/Development/code/Mod3/final_project_2/src/CalcRow.js",["45"],"/Users/arunaevan/Development/code/Mod3/final_project_2/src/modules/calculator.js",["46","47","48"],"/**\n *   REQUIRES\n */ \n\nconst esprima = require('esprima');\nconst escodegen = require('escodegen');\nconst estraverse = require('estraverse');\n\nfunction getBigO(dataType, code){\n    // Char sets\n    // const alnum = 'abcdefghijklmnopqrstuvwxyz0123456789';\n    // const alpha = 'abcdefghijklmnopqrstuvwxyz';\n    // const num = '0123456789';\n\n    // Declare data sets\n        let sets = [];\n        let n = [16, 32, 128, 256, 512, 1024, 2048, 4096]\n\n    // Populate data sets\n        switch(dataType) {\n            case \"integer\":\n                sets = n;\n                break;\n            case \"int-length-matters\":\n                sets = n;\n                n = [2,2,3,3,3,4,4,4];\n                break;\n            case \"alpha-str\":\n            case \"alpha-num-str\":\n            case \"alpha-num-spec-str\":\n            case \"array-ints\":\n                for (let i=0; i<8; i++){\n                    let arr = [];\n                    for (let j=0; j<n[i]; j++) {\n                        arr.push(Math.floor(Math.random()*9))\n                    }\n                    sets[i] = arr;\n                }\n                break;\n            case \"array-rand-str\":\n            default:\n                break;\n        }\n\n    //What if they do not use ; and the string that's sent to here includes \\n ... something like \"function foo() {let sum=0\\n let splitter = value.toString().split(\"\") .... etc.}\"\n    //what if they use \"\" in the code \n    //what about +=, -=\n    \n    // BUILD AST \n\n        const ast = esprima.parse(`${code}`);\n\n\n    // MODIFY AST\n\n        estraverse.traverse(ast, {\n            enter: function(node) {\n                if (node.type === \"BlockStatement\") {\n                    injectBlockStatements(node);\n                }\n            }\n        });\n\n\n        // MUST change arrow functions to named functions because the parser add ; to the end of an arrow function (donno why?!) and i'm unable to immediately invoke\n\n        function injectBlockStatements(node) {\n            let addCounter = {\n                type: 'ExpressionStatement', \n                expression: {\n                    type:'AssignmentExpression',\n                    left: {name: 'counter', type: 'Identifier'},\n                    operator: '+=',\n                    right: {value: 1, type: 'Literal'}\n                }\n            }\n            return node.body.unshift(addCounter)\n        }\n\n\n    // CODE GEN / UNPARSE\n\n\n        const modified = escodegen.generate(ast).replaceAll(\"\\n\", \"\");\n\n\n    //  CALCULATE BIG O APPROX\n\n        // grab counters\n        const counters = [];\n        for (let i=0; i<8; i++) {\n            let counter = 0;\n            counters.push(eval(`(()=>{(${modified})(sets[${i}]); return counter;})()`));\n        }\n\n        let bigOEst;\n        if (counters[0] === counters[7]) {\n            bigOEst = \"O(1)\";\n        }\n        else{\n            // make big o array\n            // ADD: log(n) and (2^n)\n            const ratioArr = [];\n            for (let i=0; i<8; i++) {\n                const tempArr = [];\n                    tempArr.push(counters[i] / Math.log(n[i]));\n                    tempArr.push(counters[i] / n[i]**0.5);\n                    tempArr.push(counters[i] / n[i]);\n                    tempArr.push(counters[i] / n[i]*Math.log(n[i]));\n                    tempArr.push(counters[i] / n[i]**2);\n                ratioArr.push(tempArr);\n            }\n\n            const metaRatioArr = [];\n\n            for (let i=0; i<5; i++) {\n                metaRatioArr.push(Math.abs(1 - ratioArr[6][i]/ratioArr[7][i]));\n            }\n\n            let minDiff = [metaRatioArr[0], 0];\n            for (let i=0; i<5; i++) {\n                if (metaRatioArr[i] < minDiff[0]){\n                    minDiff = [metaRatioArr[i], i];\n                }\n            }\n            let est; \n            switch(minDiff[1]) {\n                case 0:\n                    est = \"log(n)\";\n                    break;\n                case 1:\n                    est = \"n^(1/2)\"\n                    break;\n                case 2:\n                    est = \"n\"\n                    break;\n                case 3:\n                    est = \"n * log(n)\"\n                    break;\n                case 4:\n                    est = \"n^2\"\n                    break;\n                default:\n                    let error = \"There was an error, try again!\";\n                    break;\n            }\n            bigOEst = `O(${est})`;\n\n            // console.log(\"metaRatioArr\", metaRatioArr)\n        }\n\n    // RETURN :   {error, bigO estimate, hottest lines}\n    return {error: \"none\", bigOEst: bigOEst, hotLines: []}\n}\n\n\nexport { esprima, escodegen, estraverse, getBigO }",["49","50"],{"ruleId":"51","severity":1,"message":"52","line":6,"column":30,"nodeType":"53","messageId":"54","endLine":6,"endColumn":40},{"ruleId":"51","severity":1,"message":"55","line":6,"column":14,"nodeType":"53","messageId":"54","endLine":6,"endColumn":24},{"ruleId":"51","severity":1,"message":"56","line":92,"column":17,"nodeType":"53","messageId":"54","endLine":92,"endColumn":24},{"ruleId":"57","severity":1,"message":"58","line":93,"column":27,"nodeType":"59","messageId":"60","endLine":93,"endColumn":31},{"ruleId":"51","severity":1,"message":"61","line":144,"column":25,"nodeType":"53","messageId":"54","endLine":144,"endColumn":30},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},"no-unused-vars","'estraverse' is defined but never used.","Identifier","unusedVar","'handleEdit' is defined but never used.","'counter' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'error' is assigned a value but never used.","no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-global-assign","no-unsafe-negation"]